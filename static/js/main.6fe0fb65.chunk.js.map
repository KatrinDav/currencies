{"version":3,"sources":["components/Info/Info.js","components/Button/Button.js","components/SingleCurrencyTable/SingleCurrencyTable.js","views/ItemView.js","components/Header/Header.js","components/ItemCurrency/ItemCurrency.js","components/CurrenciesTable/CurrenciesTable.js","views/MainView.js","App.js","serviceWorker.js","index.js"],"names":["Info","name","accRate","maxValue","minValue","className","toUpperCase","Button","handleVisibility","isVisible","onClick","Table30","React","lazy","SingleCurrencyTable","state","data","fnMax","newObj","forEach","item","effectiveDate","mid","setState","fetch","this","props","match","params","id","then","response","json","console","log","currency","rates","dataReverse","reverse","newData","values","Object","Math","max","min","fallback","Component","withRouter","ItemView","Header","ItemCurrency","code","CurrenciesTable","useState","apiData","setData","useEffect","a","axios","get","result","fetchData","map","to","key","MainView","App","basename","process","render","location","TransitionGroup","CSSTransition","timeout","classNames","path","exact","component","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6fe0fb65.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Info.scss';\r\n\r\nconst Info = ({name, accRate, maxValue, minValue}) => {\r\n    return ( \r\n        <> \r\n          <div className=\"info-wrapper\">\r\n             <h2>{name.toUpperCase()}</h2>\r\n              <p>aktualny kurs: <span>{accRate}</span> </p>\r\n              <p>najwyższy kurs z ostatnich 30 dni: <span>{maxValue}</span></p>\r\n              <p>najniższy kurs z ostatnich 30 dni: <span>{minValue}</span></p>\r\n          </div>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default Info;","import React from 'react';\r\nimport './Button.scss';\r\n\r\nconst Button = ({handleVisibility, isVisible}) => {\r\n    return ( \r\n        <button onClick={handleVisibility} className=\"button\">\r\n            {isVisible ? 'ukryj kursy':'zobacz wszystkie kursy'}\r\n        </button>\r\n     );\r\n}\r\n \r\nexport default Button;","import React, { Suspense } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Info from '../Info/Info';\r\nimport Button from '../Button/Button';\r\n\r\n\r\nconst Table30 = React.lazy(() => import('./Table30/Table30'));\r\n\r\n\r\nclass SingleCurrencyTable extends React.Component {\r\n    state = {\r\n        name: '',\r\n        data: [],\r\n        accRate: '',\r\n        isVisible: false,\r\n\r\n    };\r\n    componentDidMount() {\r\n        fetch(`https://api.nbp.pl/api/exchangerates/rates/A/${this.props.match.params.id}/last/30/`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                this.setState({\r\n                    name: data.currency,\r\n                    data: data.rates,\r\n                    accRate: data.rates[29].mid\r\n\r\n                })\r\n            })\r\n    }\r\n\r\n    fnMax = (data) => {\r\n        data = this.state.data;\r\n        const newObj = {};\r\n        data.forEach(item => {\r\n            return newObj[item.effectiveDate] = item.mid;\r\n        })\r\n        return newObj;\r\n    }\r\n    handleVisibility = () => {\r\n        this.setState({\r\n            isVisible: !this.state.isVisible,\r\n        }\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        const { name, data, accRate, isVisible } = this.state;\r\n        const dataReverse = data.reverse();\r\n        const newData = this.fnMax(data);\r\n        const values = Object.values(newData);\r\n        const maxValue = Math.max(...values);\r\n        const minValue = Math.min(...values);\r\n\r\n        return (\r\n            <>\r\n                <Info\r\n                    name={name}\r\n                    accRate={accRate}\r\n                    maxValue={maxValue}\r\n                    minValue={minValue} />\r\n                <Button handleVisibility={this.handleVisibility} isVisible={isVisible} />\r\n                <Suspense fallback=\"pobieram...\">\r\n                    <Table30 isVisible={isVisible} dataReverse={dataReverse} />\r\n                </Suspense>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default withRouter(SingleCurrencyTable);","import React from 'react';\r\nimport SingleCurrencyTable from '../components/SingleCurrencyTable/SingleCurrencyTable';\r\n\r\n\r\nconst ItemView = () => {\r\n    return ( \r\n        <>\r\n          <div className=\"page\">\r\n             <SingleCurrencyTable/>\r\n          </div>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default ItemView;","import React from 'react';\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n    return ( \r\n        <>\r\n        <h1>Kursy walut Narodowego Banku Polskiego</h1>\r\n        <h2>Tabele A opublikowanie w ciągu ostatnich 30 dni</h2>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\nimport './ItemCurrency.scss';\r\n\r\nconst ItemCurrency = ({ item }) => {\r\n\r\n   return (\r\n\r\n      <div className=\"item\">\r\n         {item.code}\r\n      </div>\r\n\r\n   );\r\n}\r\n\r\nexport default ItemCurrency;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport ItemCurrency from '../ItemCurrency/ItemCurrency';\r\nimport './CurrenciesTable.scss';\r\n\r\n\r\nconst URL = 'https://api.nbp.pl/api/exchangerates/tables/A/';\r\n\r\nconst CurrenciesTable = () => {\r\n  const [apiData, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios.get(URL);\r\n      setData(result.data[0].rates)\r\n    };\r\n    fetchData();\r\n\r\n  }, [])\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"wrapper\">\r\n        {apiData.map(item => (\r\n          <Link to={`/rates/${item.code}`} key={item.mid} >\r\n            <ItemCurrency item={item} />\r\n          </Link>\r\n        ))}\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CurrenciesTable;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Header from '../components/Header/Header';\r\nimport CurrenciesTable from '../components/CurrenciesTable/CurrenciesTable';\r\n\r\nconst MainView = () => {\r\n    return ( \r\n        <>  \r\n            <div className=\"page\"> \r\n              <Header/>\r\n              <CurrenciesTable/>\r\n            </div>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default MainView;","import React from 'react';\nimport './App.css';\nimport ItemView from './views/ItemView';\nimport MainView from './views/MainView';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\n\nfunction App() {\n  \n  return (\n    <div className=\"app\">\n       \n         <Router basename={process.env.PUBLIC_URL}>\n         <Route render={({location}) => (\n          <TransitionGroup>\n             <CSSTransition key={location.key} timeout={550} classNames=\"fade\">\n               <Switch location={location}>\n                  <Route path='/' exact component={MainView}/>\n                  <Route path='/rates/:id' exact component={ItemView}/>\n              </Switch>  \n             </CSSTransition> \n          </TransitionGroup>\n\n         )} />\n\n       </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}